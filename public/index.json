[{"content":"socialmedia Social Media backend for DALI lab written in glorious Golang.\nInstallation You need golang and all necessary dependencies installed. Clone this repo\ngit clone https://github.com/parvusvox/socialmedia.git cd socialmedia add database connection string in \u0026ldquo;localenv\u0026rdquo; then set environmental variables\nsource localenv Run this project\ngo run server.go \u0026hellip; or with air\nair . Upload data to database navigate to the pytools directory and run script\nsource localenv cd pytools python3 upload.py Upload to heroku This repo comes with a Dockerfile you can use with heroku, just replace the with your app name on heroku\nheroku container:push web --app \u0026lt;YOUR APP NAME\u0026gt; \u0026amp;\u0026amp; heroku container:release --app \u0026lt;YOUR APP NAME\u0026gt; Authentication This backend uses Javascript Web Tokens (JWT). I only use a SHA256 hashing for password storage but that\u0026rsquo;s obviously insecure, but it\u0026rsquo;ll do for this toy project. In prod I would at the minimum do SHA512 + salting or use a third party authentication provider. The expiration for the tokens are set to 24 hours after time of creation.\nPOST /login BODY { \u0026quot;email\u0026quot;: string, \u0026quot;password\u0026quot;: string, } POST /register BODY { \u0026quot;email\u0026quot;: string, \u0026quot;password\u0026quot;: string, \u0026quot;username\u0026quot; : string, } API Usage All of these routes are protected through JWT, provide JWT token from /login as bearer token in your request header.\nGET /users?page=\u0026lt;int\u0026gt;\u0026amp;limit=\u0026lt;int\u0026gt; BODY empty RETURNS { \u0026quot;ok\u0026quot;: boolean, \u0026quot;users\u0026quot;: [ { _id : string, created_at : string, \u0026quot;updated_at\u0026quot;: string, \u0026quot;name\u0026quot;: string, \u0026quot;year\u0026quot;: string, \u0026quot;picture\u0026quot;: string, \u0026quot;gender\u0026quot;: string, \u0026quot;race\u0026quot;: string, \u0026quot;major\u0026quot;: string, \u0026quot;minor\u0026quot;: string, \u0026quot;modification\u0026quot;:string, \u0026quot;birthday\u0026quot;: string, \u0026quot;role\u0026quot;: string, \u0026quot;home\u0026quot;: string, \u0026quot;quote\u0026quot;: string, \u0026quot;favoriteShoe\u0026quot;: string, \u0026quot;favoriteArtist\u0026quot;: string, \u0026quot;favoriteColor\u0026quot;: string, \u0026quot;phoneType\u0026quot;: string, \u0026quot;likes\u0026quot;: int },... ] } POST /user BODY { \u0026quot;name\u0026quot;: string, \u0026quot;year\u0026quot;: string, \u0026quot;picture\u0026quot;: string, \u0026quot;gender\u0026quot;: string, \u0026quot;race\u0026quot;: string, \u0026quot;major\u0026quot;: string, \u0026quot;minor\u0026quot;: string, \u0026quot;modification\u0026quot;:string, \u0026quot;birthday\u0026quot;: string, \u0026quot;role\u0026quot;: string, \u0026quot;home\u0026quot;: string, \u0026quot;quote\u0026quot;: string, \u0026quot;favoriteShoe\u0026quot;: string, \u0026quot;favoriteArtist\u0026quot;: string, \u0026quot;favoriteColor\u0026quot;: string, \u0026quot;phoneType\u0026quot;: string, \u0026quot;likes\u0026quot;: int } RETURNS { \u0026quot;id\u0026quot;: string, \u0026quot;ok\u0026quot;: boolean } GET /user/\u0026lt;id\u0026gt; BODY empty RETURNS { \u0026quot;ok\u0026quot; : boolean, \u0026quot;user\u0026quot;: { \u0026quot;name\u0026quot;: string, \u0026quot;year\u0026quot;: string, \u0026quot;picture\u0026quot;: string, \u0026quot;gender\u0026quot;: string, \u0026quot;race\u0026quot;: string, \u0026quot;major\u0026quot;: string, \u0026quot;minor\u0026quot;: string, \u0026quot;modification\u0026quot;:string, \u0026quot;birthday\u0026quot;: string, \u0026quot;role\u0026quot;: string, \u0026quot;home\u0026quot;: string, \u0026quot;quote\u0026quot;: string, \u0026quot;favoriteShoe\u0026quot;: string, \u0026quot;favoriteArtist\u0026quot;: string, \u0026quot;favoriteColor\u0026quot;: string, \u0026quot;phoneType\u0026quot;: string, \u0026quot;likes\u0026quot;: int } } GET /index BODY empty RETURNS { \u0026quot;ok\u0026quot; : boolean, } GET /searchQuotes?q=\u0026lt;query\u0026gt; BODY empty RETURNS { \u0026quot;ok\u0026quot;: boolean, \u0026quot;length\u0026quot;: int, \u0026quot;users\u0026quot;: [ { \u0026quot;name\u0026quot;: string, \u0026quot;year\u0026quot;: string, \u0026quot;picture\u0026quot;: string, \u0026quot;gender\u0026quot;: string, \u0026quot;race\u0026quot;: string, \u0026quot;major\u0026quot;: string, \u0026quot;minor\u0026quot;: string, \u0026quot;modification\u0026quot;:string, \u0026quot;birthday\u0026quot;: string, \u0026quot;role\u0026quot;: string, \u0026quot;home\u0026quot;: string, \u0026quot;quote\u0026quot;: string, \u0026quot;favoriteShoe\u0026quot;: string, \u0026quot;favoriteArtist\u0026quot;: string, \u0026quot;favoriteColor\u0026quot;: string, \u0026quot;phoneType\u0026quot;: string, \u0026quot;likes\u0026quot;: int } ] } ","permalink":"https://blog.ianmkim.com/posts/first-post/","summary":"socialmedia Social Media backend for DALI lab written in glorious Golang.\nInstallation You need golang and all necessary dependencies installed. Clone this repo\ngit clone https://github.com/parvusvox/socialmedia.git cd socialmedia add database connection string in \u0026ldquo;localenv\u0026rdquo; then set environmental variables\nsource localenv Run this project\ngo run server.go \u0026hellip; or with air\nair . Upload data to database navigate to the pytools directory and run script\nsource localenv cd pytools python3 upload.py Upload to heroku This repo comes with a Dockerfile you can use with heroku, just replace the with your app name on heroku","title":"First Post"}]